import React, { useCallback, useEffect, useState } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  Image, 
  TouchableOpacity, 
  SafeAreaView, 
  StatusBar, 
  FlatList,
  ActivityIndicator,
  Alert 
} from 'react-native';
import Icon from 'react-native-vector-icons/MaterialIcons';
import MapView, { PROVIDER_GOOGLE, Marker, Polyline } from 'react-native-maps';
import { useRouter, useLocalSearchParams } from 'expo-router';
import { useRef } from 'react';
import gasaiGonDetails from '@/Constants/gaSaigonDetail';
import axios from 'axios';
import tanSonNhatDetail from '@/Constants/tanSonNhatDetail';
import distance_gaDaNang_TanSonNhat from '@/Constants/distance_gaDaNang_TanSonNhat';
import distance_gaSaiGon_TanSonNhat from '@/Constants/distance_gaSaiGon_TanSonNhat';
import gaDaNangDetails from '@/Constants/gaDaNangDetail';
import { memo as reactMemo } from 'react';
const memo = reactMemo;
import { GaDaNangID, GaSaiGonID, TanSonNhatID } from '@/Constants/place_id';
import { useAuth, API_URL } from "@/view-model/AuthContext";
const GOMAP_API_KEY = process.env.GOMAP_API_KEY;

// Types
interface Location {
  id: string;
  name: string;
  coordinates?: {
    lat: number;
    lng: number;
  };
}

interface RideOption {
  id: string;
  icon: any;
  title: string;
  description: string;
  price: string;
  originalPrice: string;
}


function formatCurrency(amount) {
  return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);
}

const RideOptionItem = memo(({ option, selected, onSelect, distance }) => (
  <TouchableOpacity 
    style={[styles.rideOption, selected && styles.rideOptionSelected]}
    onPress={() => onSelect(option)}
  >
    <Image source={option.icon} style={styles.rideIcon} />
    <View style={styles.rideInfo}>
      <Text style={styles.rideTitle}>{option.title}</Text>
      <View style={styles.rideDetails}>
        <Icon name="person" size={16} color="#666" />
        <Text style={styles.rideDescription}>{option.description}</Text>
      </View>
    </View>
    <View style={styles.priceContainer}>
      <Text style={styles.price}>
        {formatCurrency(option.price_per_km * (distance || 0))}
      </Text>
      <Text style={styles.originalPrice}>{option.originalPrice}đ</Text>
    </View>
  </TouchableOpacity>
));


const API_SERVICE = {

  BASE_URL: 'https://maps.gomaps.pro/maps/api',

  async fetchLocationDetails(placeId: string) {
    try {
      const response = await fetch(
        `${this.BASE_URL}/place/details/json?place_id=${placeId}&key=${GOMAP_API_KEY}`
      );
      const data = await response.json();
      return data.result;
    } catch (error) {
      console.error('Error fetching location details:', error);
      throw error;
    }
  },

  async fetchRouteInfo(origin: Location, destination: Location) {
    try {
      const response = await fetch(
        `${this.BASE_URL}/distancematrix/json?origins=${origin.name}&destinations=${destination.name}&key=${GOMAP_API_KEY}`
      );
      const data = await response.json();
      return data.rows[0].elements[0];
    } catch (error) {
      console.error('Error fetching route info:', error);
      throw error;
    }
  },
}

const API_SERVICE2 = {

  async fetchLocationDetails2(placeId: string) {
    if (placeId === GaSaiGonID) {
      return Promise.resolve(gasaiGonDetails);
    } else if (placeId === TanSonNhatID) {
      return Promise.resolve(tanSonNhatDetail);
    }
    else if (placeId === GaDaNangID) {
      return Promise.resolve(gaDaNangDetails);
    }
  },
  
  async fetchRouteInfo2(origin: Location, destination: Location) {
    if (origin.id === TanSonNhatID && destination.id === GaSaiGonID) {
      return Promise.resolve(distance_gaSaiGon_TanSonNhat.rows[0].elements[0]);
    }
    else if (origin.id === TanSonNhatID && destination.id === GaDaNangID) {
      return Promise.resolve(distance_gaDaNang_TanSonNhat.rows[0].elements[0]);
    }
  },

};


const useLocationData = (departureId, destinationId) => {
  // const [locations, setLocations] = useState({
  //   departure: null,
  //   destination: null
  // });

  const [locations, setLocations] = useState({
    departure: {
      id: null,
      name: '',
      coordinates: null
    },
    destination: {
      id: null,
      name: '',
      coordinates: null
    }
  });

  const [routeInfo, setRouteInfo] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true);
        setError(null);

        // console.log('fetching location details:', departureId, destinationId);
        const [departureDetails, destinationDetails] = await Promise.all([
          API_SERVICE2.fetchLocationDetails2(departureId),
          API_SERVICE2.fetchLocationDetails2(destinationId)
        ]);

        const updatedLocations = {
          departure: {
            id: departureId,
            coordinates: departureDetails.geometry.location
          },
          destination: {
            id: destinationId,
            coordinates: destinationDetails.geometry.location
          }
        };

        setLocations(updatedLocations);

        const route = await API_SERVICE2.fetchRouteInfo2(
          { id: departureId },
          { id: destinationId }
        );

        setRouteInfo({
          duration: route.duration.text,
          distance: parseFloat(route.distance.text.match(/\d+(\.\d+)?/)[0])
        });
      } catch (err) {
        setError(err);
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [departureId, destinationId]);

  return { locations, routeInfo, isLoading, error };
};

const MapSection = ({ origin, destination, duration, distance }) => {

  const mapRef = useRef<MapView>(null); // Tạo reference để truy cập MapView

  useEffect(() => {
    if (origin?.coordinates && destination?.coordinates) {
      const coordinates = [
        {
          latitude: origin.coordinates.lat,
          longitude: origin.coordinates.lng,
        },
        {
          latitude: destination.coordinates.lat,
          longitude: destination.coordinates.lng,
        },
      ];
      mapRef.current?.fitToCoordinates(coordinates, {
        edgePadding: { top: 50, right: 50, bottom: 50, left: 50 },
        animated: true,
      });
    }
  }, [origin, destination]);


  return (
    <View style={styles.mapContainer}>
      {/* MapView hiển thị bản đồ */}
      <MapView
        ref={mapRef} // Gắn reference để điều khiển MapView
        provider={PROVIDER_GOOGLE}
        style={styles.map}
        initialRegion={{
          latitude: origin?.coordinates?.lat || 10.7769,
          longitude: origin?.coordinates?.lng || 106.7009,
          latitudeDelta: 0.0922,
          longitudeDelta: 0.0421,
        }}
      >
        {/* Hiển thị marker tại điểm xuất phát */}
        {/* {origin?.coordinates && (
          <Marker
            coordinate={{
              latitude: origin.coordinates.lat,
              longitude: origin.coordinates.lng,
            }}
          />
        )} */}

        {/* Hiển thị marker tại điểm đến */}
        {/* {destination?.coordinates && (
          <Marker
            coordinate={{
              latitude: destination.coordinates.lat,
              longitude: destination.coordinates.lng,
            }}
          />
        )} */}

        {/* Vẽ đường thẳng nối hai điểm */}
        {/* {origin?.coordinates && destination?.coordinates && ( */}
          {/* <Polyline
            coordinates={[
              {
                latitude: origin.coordinates.lat,
                longitude: origin.coordinates.lng,
              },
              {
                latitude: destination.coordinates.lat,
                longitude: destination.coordinates.lng,
              },
            ]}
            strokeColor="#FF0000" // Màu đường thẳng
            strokeWidth={50} // Độ dày đường thẳng
          /> */}
        {/* )} */}
      </MapView>

      {/* Hiển thị thông tin thời gian */}
      {duration && (
        <View style={styles.timeChip}>
          <Text style={styles.timeText}>{duration}</Text>
        </View>
      )}

      {/* Hiển thị thông tin khoảng cách */}
      {distance && (
        <View style={styles.distanceChip}>
          <Text style={styles.timeText}>{distance} Km</Text>
        </View>
      )}
    </View>
  );
};

const Header = ({ departure, destination, onBack }) => (
  <View style={styles.header}>
    <TouchableOpacity style={styles.backButton} onPress={onBack}>
      <Icon name="arrow-back" size={24} color="#000" />
    </TouchableOpacity>
    <View style={styles.locationContainer}>
      <View style={styles.locationItem}>
        <Icon name="location-on" size={20} color="#000" />
        <Text style={styles.locationText} numberOfLines={1}>
          {departure.name}
        </Text>
      </View>
      <View style={styles.locationItem}>
        <Icon name="place" size={20} color="#f4a460" />
        <Text style={styles.locationText} numberOfLines={1}>
          {destination.name}
        </Text>
      </View>
    </View>
    <TouchableOpacity style={styles.addButton}>
      <Icon name="add" size={24} color="#fff" />
    </TouchableOpacity>
  </View>
);

export default function BookingScreen() {
  const router = useRouter();
  const params = useLocalSearchParams();
  const { authState } = useAuth();

  const { locations, routeInfo, isLoading, error } = useLocationData(
    params.departure_id,
    params.destination_id
  );

  const [selectedRide, setSelectedRide] = useState(null);

  // useEffect(() => {
  //   console.log("userId: ", userId);
  // }, [userId]);

  useEffect(() => {
    if (!isLoading && routeInfo) {
      setSelectedRide(RIDE_OPTIONS[0]);
    }
  }, [isLoading, routeInfo]);

  const handleRideSelect = useCallback((ride) => {
    setSelectedRide(ride);
  }, []);

  const handleBooking = useCallback(async () => {

    if (!authState?.token) {
      Alert.alert("Lỗi", "Không tìm thấy token xác thực.");
      return;
    }
    
    try{
      const result = await axios.post(
        `${API_URL}/bookings`,
          {
            "pickupLocation": {
                "id": locations.departure.id,
                "latitude": locations.departure.coordinates.lat,
                "longitude": locations.departure.coordinates.lng,
                "address": params.departure_name,
                "city": "",
                "district": "",
                "ward": ""
            },
            "destinationLocation": {
                "id": locations.destination.id,
                "latitude": locations.destination.coordinates.lat,
                "longitude": locations.destination.coordinates.lng,
                "address": params.destination_name,
                "city": "",
                "district": "",
                "ward": ""
            },
            "estimatedPrice": selectedRide?.price_per_km * routeInfo.distance,
            "vehicleType": selectedRide?.type,
        },
        {
          headers: {
            Authorization: `bearer ${authState.token}`,
          },
        }
      );

      const userID_updated = result.data.result.userId;

      console.log("id booking: ", result.data.result.id)

      console.log(selectedRide);

      if (selectedRide) {
        router.push({
          pathname: '/finding_driver',
          params: {
            userId: userID_updated,
            bookingId: result.data.result.id,
            departure_id: params.departure_id,
            destination_id: params.destination_id,
            ride: selectedRide,
            departure_name: params.departure_name,
            destination_name: params.destination_name,
          }
        });
        console.log("da bam nut");
      }
    } catch (err: any) {
      if (err.response) {
        console.error("Server Response Error:", err.response.data);
        Alert.alert(
          "Lỗi",
          `Không thể xác nhận cuốc xe: ${
            err.response.data?.message || "Không xác định"
          }`
        );
      } else if (err.request) {
        console.error("No Response Error:", err.request);
        Alert.alert(
          "Lỗi",
          "Không nhận được phản hồi từ server. Vui lòng thử lại."
        );
      } else {
        console.error("Unknown Error:", err.message);
        Alert.alert("Lỗi", `Đã xảy ra lỗi: ${err.message}`);
      }
    }

  }, [selectedRide, router]);


  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" />
      
      <Header
        departure={{
          id: params.departure_id,
          name: params.departure_name
        }}
        destination={{
          id: params.destination_id,
          name: params.destination_name
        }}
        onBack={() => router.back()}
      />
      
      {!isLoading && locations && routeInfo && (
        <MapSection
          origin={locations.departure}
          destination={locations.destination}
          duration={routeInfo.duration}
          distance={routeInfo.distance}
        />
      )}

      {!isLoading && routeInfo && (
        <>
          <FlatList
            data={RIDE_OPTIONS}
            keyExtractor={item => item.id.toString()}
            renderItem={({ item }) => (
              <RideOptionItem
                option={item}
                selected={selectedRide?.id === item.id}
                onSelect={handleRideSelect}
                distance={routeInfo.distance}
              />
            )}
            style={styles.rideList}
          />

          <View style={styles.footer}>
            <View style={styles.paymentRow}>
              <Icon name="monetization-on" size={24} color="#666" />
              <Text style={styles.paymentText}>Tiền mặt</Text>
              <View style={styles.discountChip}>
                <Icon name="local-offer" size={16} color="#40e0d0" />
                <Text style={styles.discountText}>Giảm 15%</Text>
              </View>
              <TouchableOpacity onPress={() => {
                  router.push("/select_voucher");
                }}>
              <Icon name="receipt" size={24} color="#666" />
              </TouchableOpacity>
            </View>
            <View style={styles.buttonRow}>
              <TouchableOpacity style={styles.xanhNowButton}>
                <Text style={styles.xanhNowText}>Đặt hộ</Text>
              </TouchableOpacity>

              <TouchableOpacity 
                style={[
                  styles.bookButton,
                  !selectedRide && styles.bookButtonDisabled
                ]}
                onPress={handleBooking}
                disabled={!selectedRide}
              >
                <Text style={styles.bookButtonText}>
                  {selectedRide 
                    ? "Đặt" + ` ${selectedRide.title.toLowerCase()}`
                    : 'Vui lòng chọn loại xe'}
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        </>
      )}

      {isLoading && (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#0000ff" />
        </View>
      )}

    </SafeAreaView>
  );
}

const RIDE_OPTIONS = [
  {
    id: 0,
    icon: require('@/assets/images/taxi.png'),
    title: 'Xe 4 chỗ',
    description: 'Tối đa 4 hành khách',
    price_per_km: 20000,
    originalPrice: 22000,
    type: 'CAR'
  },
  {
    id: 1,
    icon: require('@/assets/images/lux_car.png'),
    title: 'Xe 7 chỗ',
    description: 'Tối đa 7 hành khách',
    price_per_km: 40000,
    originalPrice: 45000,
    type: 'CAR'
  },
  {
    id: 2,
    icon: require('@/assets/images/bike.png'),
    title: 'Xe máy',
    description: 'Tối đa 2 hành khách',
    price_per_km: 10000,
    originalPrice: 14000,
    type: 'BIKE'
  }
];

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  backButton: {
    padding: 8,
  },
  locationContainer: {
    flex: 1,
    marginHorizontal: 12,
  },
  locationItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 4,
  },
  locationText: {
    marginLeft: 8,
    fontSize: 14,
    color: '#333',
  },
  addButton: {
    backgroundColor: '#40e0d0',
    padding: 8,
    borderRadius: 20,
  },
  mapContainer: {
    height: 200,
    position: 'relative',
  },
  map: {
    ...StyleSheet.absoluteFillObject,
  },
  timeChip: {
    position: 'absolute',
    top: '70%',
    left: '15%',
    transform: [{ translateX: -40 }, { translateY: -20 }],
    backgroundColor: '#40e0d0',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
  },
  distanceChip: {
    position: 'absolute',
    top: '90%',
    left: '15%',
    transform: [{ translateX: -40 }, { translateY: -20 }],
    backgroundColor: '#40e0d0',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
  },
  timeText: {
    color: '#fff',
    fontWeight: 'bold',
  },
  rideOptionsContainer: {
    maxHeight: 300,
    flex: 1,
    padding: 16,
  },
  warningContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    backgroundColor: '#f8f8f8',
    borderRadius: 8,
    marginBottom: 16,
  },
  warningText: {
    flex: 1,
    marginLeft: 8,
    color: '#666',
  },
  rideOption: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    borderRadius: 12,
    marginBottom: 12,
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#eee',
  },
  rideOptionSelected: {
    borderColor: '#40e0d0',
    backgroundColor: '#f0ffff',
  },
  rideIcon: {
    width: 48,
    height: 48,
  },
  rideInfo: {
    flex: 1,
    marginLeft: 12,
  },
  rideTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  rideDetails: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 4,
  },
  rideDescription: {
    marginLeft: 4,
    color: '#666',
    fontSize: 14,
  },
  priceContainer: {
    alignItems: 'flex-end',
  },
  price: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  originalPrice: {
    fontSize: 14,
    color: '#999',
    textDecorationLine: 'line-through',
  },
  footer: {
    padding: 16,
    borderTopWidth: 1,
    borderTopColor: '#eee',
  },
  paymentRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  paymentText: {
    marginLeft: 8,
    flex: 1,
    color: '#333',
  },
  discountChip: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f0ffff',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 16,
    marginRight: 12,
  },
  discountText: {
    marginLeft: 4,
    color: '#40e0d0',
    fontSize: 12,
  },
  buttonRow: {
    flexDirection: 'row',
    gap: 12,
  },
  xanhNowButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#40e0d0',
    alignItems: 'center',
  },
  xanhNowText: {
    color: '#40e0d0',
    fontWeight: 'bold',
  },
  bookButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    backgroundColor: '#40e0d0',
    alignItems: 'center',
  },
  bookButtonDisabled: {
    backgroundColor: '#ccc',
  },
  bookButtonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
  rideList: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});


